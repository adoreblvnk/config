#!/bin/bash
# /usr/bin

set -euo pipefail

# constants
readonly CONFIG="config.yaml"
# deps_file="deps.list"
# install_file="install.list"
# readonly FILTER_COMMENT='map(select(startswith("#") | not))'

usage() {
  cat <<EOF
TIDES (The Idempotent Dev Environment Setup) is a post-install, update, & dotfile manager

Usage: tides [OPTIONS]

Commands:
  check         Installs dependencies, Python (via pyenv), Cargo (via rustup), & firmware packages
  install, i    Installs all packages. Auto-invokes \`configure\` when done
  update, u     Updates & upgrades apt, flatpak, cargo, pip packages
  configure, c  Dotfile manager (via Stow)
  help, h       Print help information

Configuration:
  Customise each command's behaviour by modifying the \`config.json\` file.
  Optionally, packages to be installed can be managed via \`deps.list\` & \`install.list\` text file.
  The config schema of \`config.json\` is available at \`README.md\`.

Example:
  tides configure

EOF
}

error_msg() {
  cat <<EOF
Error: Invalid argument(s)

EOF
}

check() {
  echo check
}

update() {
  if [[ $(yq '.config.update.check' $CONFIG) == true ]]; then
    check
  fi

  if [[ $(yq '.config.update.apt.apt' $CONFIG) == true ]]; then
    # update apt
    sudo apt-get -qq update
    sudo apt-get -qy upgrade
    # aptFull removes old archive files & unused packages with their config files
    if [[ $(yq '.config.update.apt.aptFull' $CONFIG) == true ]]; then
      sudo apt-get -qy autoclean
      sudo apt-get -qy --purge autoremove
    fi
  fi

  # update flatpak
  if [[ $(yq '.config.update.flatpak' $CONFIG) == true ]] \
    && command -v flatpak &>/dev/null; then
    flatpak update -y
  fi

  # update pip
  if [[ $(yq '.config.update.pip' "$CONFIG") == true ]] \
    && command -v pyenv &>/dev/null; then
    # TODO: test if pyenv update updates python patch version too
    pyenv update
    local version
    version=$(yq '.config.check.python.version' "$CONFIG")
    python"$version" -m pip install --upgrade pip
  fi

  # update cargo
  if [[ $(yq '.config.update.cargo' "$CONFIG") == true ]] \
    && command -v rustup &>/dev/null; then
    # update rust first
    rustup update
    cargo install-update -a
  fi

  # update yq
  if [[ $(yq '.config.update.other.yq' "$CONFIG") ]]; then
    # get local yq version & parse it
    local_yq_ver=$(yq --version | cut -d ' ' -f 4)
    # get latest yq version
    latest_yq_ver=$(
      curl -s https://api.github.com/repos/mikefarah/yq/releases/latest \
        | yq -o=json -r '.tag_name'
    )
    if [[ $local_yq_ver == "$latest_yq_ver" ]]; then
      # download & install yq
      sudo curl -sSL -o /usr/bin/yq \
        https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
      sudo chmod +x /usr/bin/yq
    fi
  fi

  # zellij delete all other sessions, including exited ones
  if [[ $(yq '.config.update.other.zellijClear' "$CONFIG") == true ]] \
    && command -v zellij &>/dev/null; then
    zellij delete-all-sessions -y
  fi
}

main() {
  # download & install yq if not installed
  if ! command -v yq &>/dev/null; then
    sudo curl -sSL -o /usr/bin/yq \
      https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    sudo chmod +x /usr/bin/yq
  fi

  [[ $# -gt 0 ]] || {
    usage
    error_msg
    exit 1
  }

  while [[ $# -gt 0 ]]; do
    case $1 in
      check) check ;;
      install | i) install ;;
      update | u) update ;;
      configure | c) configure ;;
      help | h)
        usage
        # exit 0
        ;;
      *)
        usage
        error_msg
        exit 1
        ;;
    esac
    shift
  done
}

main "$@"
