#!/bin/bash

set -euo pipefail

# constants
readonly DOTFILES="dotfiles/"
CONFIG="config.yaml"
SECRETS="secrets.yaml"

_usage() {
  cat <<EOF
TIDES (The Idempotent Dev Environment Setup) is a post-install, update, & dotfile manager

Usage: tides [OPTIONS]

Commands:
  check         Installs dependencies, Python (via pyenv), Cargo (via rustup), & firmware packages
  install, i    Installs all packages. Auto-invokes \`configure\` when done
  update, u     Updates & upgrades apt, flatpak, cargo packages
  configure, c  Dotfile manager (via Stow)
  help, h       Print help information

Configuration:
  Customise each command's behaviour by modifying the \`config.json\` file.
  Optionally, packages to be installed can be managed via \`deps.list\` & \`install.list\` text file.
  The config schema of \`config.json\` is available at \`README.md\`.

Example:
  tides configure

EOF
}

_error_msg() {
  cat <<EOF
Error: Invalid argument(s)

EOF
}

# ----- OPTIONS -----

set_config_file() { CONFIG=$1; }

set_secrets_file() { SECRETS=$1; }

# ----- COMMANDS -----

check() {
  # purge system
  if [[ $(yq '.config.check.purgeEnabled' "$CONFIG") == true ]]; then
    # collect purge packages into array
    local purge_pkgs
    mapfile -t purge_pkgs < <(yq '.config.check.purge[]' "$CONFIG")
    for pkg in "${purge_pkgs[@]}"; do
      # shellcheck disable=SC2086
      sudo apt-get autoremove --purge -qy $pkg
    done
  fi

  # install deps
  if [[ $(yq '.config.check.depsEnabled' "$CONFIG") == true ]]; then
    sudo apt-get update -qq
    # shellcheck disable=SC2046
    sudo apt-get install -qy $(yq '.config.check.deps[]' "$CONFIG")
  fi

  # install pyenv & python version
  if [[ $(yq '.config.check.python.pyenvCheck' "$CONFIG") == true ]]; then
    # install pyenv
    if ! command -v pyenv &>/dev/null; then
      # installs pyenv-installer https://github.com/pyenv/pyenv-installer & the
      # following:
      #   - pyenv https://github.com/pyenv/pyenv
      #   - pyenv-doctor https://github.com/pyenv/pyenv-doctor
      #   - pyenv-update https://github.com/pyenv/pyenv-update
      #   - pyenv-virtualenv https://github.com/pyenv/pyenv-virtualenv
      curl https://pyenv.run | bash

      # temporarily export pyenv
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
    fi

    # install latest python version
    local latest_py_ver=$(pyenv latest -k "$(yq '.config.check.python.version' "$CONFIG")")
    if ! command -v "python$(yq '.config.check.python.version' "$CONFIG")" &>/dev/null \
      || [[ $(pyenv version-name) != "$latest_py_ver" ]]; then
      pyenv install "$(yq '.config.check.python.version' "$CONFIG")"
      pyenv global "$(yq '.config.check.python.version' "$CONFIG")"
    fi
  fi

  # install rustup, rustc, cargo
  if [[ $(yq '.config.check.rustupCheck' "$CONFIG") == true ]] \
    && ! command -v rustup &>/dev/null; then
    # yes
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -h
  fi

  # setup appimaged if appimaged service isn't running / doesn't exist
  if [[ $(yq '.config.check.appimagedCheck' "$CONFIG") == true ]] \
    && ! systemctl -q --user is-active appimaged; then
    # https://github.com/probonopd/go-appimage/tree/master/src/appimaged#initial-setup

    # remove pre-existing similar tools
    systemctl --user stop appimaged.service || true
    sudo apt-get remove -qy appimagelauncher || true

    # clear cache
    rm -rf "$HOME/.local/share/applications/appimage*"
    [ -f ~/.config/systemd/user/default.target.wants/appimagelauncherd.service ] \
      && rm ~/.config/systemd/user/default.target.wants/appimagelauncherd.service

    # download appimaged
    mkdir -p "$HOME/Applications"
    # get continuous release via GitHub api
    local browser_download_url=$(
      curl -sSL https://api.github.com/repos/probonopd/go-appimage/releases/tags/continuous \
        | yq '.assets[].browser_download_url | select(. == "*appimaged*x86_64.AppImage")'
    )
    curl -sSL -o "$HOME/Applications/appimaged.AppImage" \
      "$browser_download_url"

    # launch
    chmod +x "$HOME/Applications/appimaged.AppImage"
    "$HOME/Applications/appimaged.AppImage"
  fi

  # install nerdfont
  if [[ $(yq '.config.check.nerdfontEnabled' "$CONFIG") == true ]]; then
    local font=$(yq '.config.check.nerdfont' "$CONFIG")
    if [[ ! -d "/usr/share/fonts/$font" ]]; then
      sudo mkdir -p "/usr/share/fonts/$font"
      curl -sSL \
        "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/$font.tar.xz" \
        | sudo tar -xvJ -C "/usr/share/fonts/$font"
      fc-cache -vf
    fi
  fi
}

install() {
  if [[ $(yq '.config.install.check' "$CONFIG") == true ]]; then
    check
  fi

  # install apt packages
  if [[ $(yq '.config.install.aptEnabled' "$CONFIG") == true ]] \
    && [[ $(yq '.config.install.apt | length' "$CONFIG") -gt 0 ]]; then
    sudo apt-get update -qqy
    # shellcheck disable=SC2046
    sudo apt-get install -qy $(yq '.config.install.apt[]' "$CONFIG")
  fi

  # install ppa packages
  local no_of_ppa_pkgs=$(yq '.config.install.ppa | length' "$CONFIG")
  if [[ $(yq '.config.install.ppaEnabled' "$CONFIG") == true ]] \
    && [[ $no_of_ppa_pkgs -gt 0 ]]; then
    # add ppa repos (& their gpg keys automatically)
    for ((i = 0; i < no_of_ppa_pkgs; i++)); do
      sudo apt-add-repository -y \
        "$(yq ".config.install.ppa[$i].ppaUrl" "$CONFIG")"
    done
    sudo apt-get update -q
    # shellcheck disable=SC2046
    sudo apt-get install -qy $(yq '.config.install.ppa[].packages[]' "$CONFIG")
  fi

  # install from apt alternative sources
  local no_of_alt_sources=$(yq '.config.install.aptAltSources | length' "$CONFIG")
  if [[ $(yq '.config.install.aptAltSourcesEnabled' "$CONFIG") == true ]] \
    && [[ $no_of_alt_sources -gt 0 ]]; then
    # setting up signing keys & repo entries
    for ((i = 0; i < no_of_alt_sources; i++)); do
      local alt_pkg_obj=$(yq ".config.install.aptAltSources[$i]" "$CONFIG")

      # download gpg key from remote
      if [[ $(yq '.gpgKeyPath' <<<"$alt_pkg_obj") == *.asc ]]; then
        sudo curl -fsSL -o "$(yq '.gpgKeyPath' <<<"$alt_pkg_obj")" \
          "$(yq '.remoteGpgKey' <<<"$alt_pkg_obj")"
      elif [[ $(yq '.gpgKeyPath' <<<"$alt_pkg_obj") == *.gpg ]]; then
        # dearmor if key is required to be in gpg format
        sudo curl -fsSL "$(yq '.remoteGpgKey' <<<"$alt_pkg_obj")" \
          | sudo gpg --dearmor --yes -o "$(yq '.gpgKeyPath' <<<"$alt_pkg_obj")"
      fi

      # add repo entry into sources.list.d
      local source_file_full_path="/etc/apt/sources.list.d/$(yq '.sourceFile' <<<"$alt_pkg_obj").list"
      eval echo "$(yq '.repo' <<<"$alt_pkg_obj")" \
        | sudo tee "$source_file_full_path" >/dev/null

      # perform pinning if pinning entry exists
      if [[ $(yq '.pinning' <<<"$alt_pkg_obj") != false ]]; then
        # perform pinning to prioritise
        local pref_file="/etc/apt/preferences.d/$(yq '.sourceFile' <<<"$alt_pkg_obj")"
        yq '.pinning' <<<"$alt_pkg_obj" \
          | sudo tee "$pref_file" >/dev/null
      fi
    done
    # install packages
    sudo apt-get update -q
    # disable shellcheck to enable installing multiple packages
    # shellcheck disable=SC2046
    sudo apt-get install -qy \
      $(yq '.config.install.aptAltSources[].packages[]' "$CONFIG")
  fi

  # install flatpaks
  if [[ $(yq '.config.install.flatpakEnabled' "$CONFIG") == true ]] \
    && [[ $(yq '.config.install.flatpak | length' "$CONFIG") -gt 0 ]] \
    && command -v flatpak &>/dev/null; then
    # shellcheck disable=SC2046
    flatpak install -y flathub $(yq '.config.install.flatpak[]' "$CONFIG")
  fi

  # install cargo packages
  if [[ $(yq '.config.install.cargoEnabled' "$CONFIG") == true ]] \
    && [[ $(yq '.config.install.cargo | length' "$CONFIG") -gt 0 ]] \
    && command -v cargo &>/dev/null; then
    local rust_pkgs
    mapfile -t rust_pkgs < <(yq '.config.install.cargo[]' "$CONFIG")
    for pkg in "${rust_pkgs[@]}"; do
      # disable to enable installing with options
      # shellcheck disable=SC2086
      cargo install $pkg
    done
  fi

  # install binary packages
  local no_of_binaries=$(yq '.config.install.binaries | length' "$CONFIG")
  if [[ $(yq '.config.install.binariesEnabled' "$CONFIG") == true ]] \
    && [[ $no_of_binaries -gt 0 ]]; then
    mkdir -p "$HOME/Applications"
    for ((i = 0; i < no_of_binaries; i++)); do
      local binary_obj=$(yq ".config.install.binaries[$i]" "$CONFIG")
      # skip if binary exists
      if [[ -f "$HOME/Applications/$(yq '.name' <<<"$binary_obj")" ]]; then
        continue
      fi
      # install AppImage
      if [[ $(yq '.name' <<<"$binary_obj") == *.AppImage ]]; then
        local download_url="$(yq '.url' <<<"$binary_obj")"
        # execute string as subshell if subshell detected
        if grep -Eq '\$\(.*\)' <<<"$(yq '.url' <<<"$binary_obj")"; then
          download_url="$(eval echo "$(yq '.url' <<<"$binary_obj")")"
        fi
        curl -fsSL -o "$HOME/Applications/$(yq '.name' <<<"$binary_obj")" \
          "$download_url"
        chmod +x "$HOME/Applications/$(yq '.name' <<<"$binary_obj")"
      fi
    done
  fi
}

update() {
  if [[ $(yq '.config.update.check' "$CONFIG") == true ]]; then
    check
  fi

  if [[ $(yq '.config.update.apt.apt' "$CONFIG") == true ]]; then
    # update apt
    sudo apt-get -qq update
    sudo apt-get -qy upgrade
    # aptFull removes old archive files & unused packages with their config files
    if [[ $(yq '.config.update.apt.aptFull' "$CONFIG") == true ]]; then
      sudo apt-get -qy dist-upgrade
      sudo apt-get -qy autoclean
      sudo apt-get -qy --purge autoremove
    fi
  fi

  # update flatpak
  if [[ $(yq '.config.update.flatpak' "$CONFIG") == true ]] \
    && command -v flatpak &>/dev/null; then
    flatpak update -y
  fi

  # update python
  if [[ $(yq '.config.update.python' "$CONFIG") == true ]] \
    && command -v pyenv &>/dev/null; then
    # update pyenv
    pyenv update
    # update python
    local latest_py_ver=$(pyenv latest -k "$(yq '.config.check.python.version' "$CONFIG")")
    if [[ $(pyenv version-name) != "$latest_py_ver" ]]; then
      pyenv install "$(yq '.config.check.python.version' "$CONFIG")"
      pyenv global "$(yq '.config.check.python.version' "$CONFIG")"
    fi
    # update pip
    local py_ver="python$(yq '.config.check.python.version' "$CONFIG")"
    $py_ver -m pip install --upgrade pip
  fi

  # update cargo
  if [[ $(yq '.config.update.cargo' "$CONFIG") == true ]] \
    && command -v rustup &>/dev/null \
    && command -v cargo &>/dev/null; then
    # update rust first
    rustup update
    # checks & updates to newest cargo packages
    cargo install-update -a
  fi

  # update yq
  if [[ $(yq '.config.update.other.yq' "$CONFIG") == true ]]; then
    # get local yq version & parse it
    local_yq_ver=$(yq --version | cut -d ' ' -f 4)
    # get latest yq version
    latest_yq_ver=$(
      curl -sSL https://api.github.com/repos/mikefarah/yq/releases/latest \
        | yq '.tag_name'
    )
    if [[ $local_yq_ver != "$latest_yq_ver" ]]; then
      # download & install yq
      sudo curl -sSL -o /usr/bin/yq \
        https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
      sudo chmod +x /usr/bin/yq
    fi
  fi

  # zellij delete all other sessions, including exited ones
  if [[ $(yq '.config.update.other.zellijClear' "$CONFIG") == true ]] \
    && command -v zellij &>/dev/null; then
    zellij delete-all-sessions -y
  fi
}

configure() {
  if [[ $(yq '.config.configure.check' "$CONFIG") == true ]]; then
    check
  fi

  # dotfile manager implementation via Stow
  if [[ $(yq '.config.configure.dotfilesEnabled' "$CONFIG") == true ]] \
    && [[ $(yq '.config.configure.dotfiles.dotfiles | length' "$CONFIG") -gt 0 ]] \
    && command -v stow &>/dev/null; then
    local packages
    mapfile -t packages < <(
      yq -r '.config.configure.dotfiles.dotfiles[]' "$CONFIG"
    )
    for pkg in "${packages[@]}"; do
      # symlink between tides & actual dotfiles
      # --no-folding stows individual files instead of directories
      # --adopt replaces tides' dotfiles with system ones. this is needed as
      # Stow throws an error if there are existing system dotfiles. mitigated
      # if .config.configure.stowMode is set to "override".
      stow --no-folding --adopt -v -d "dotfiles/" -t "$HOME" "$pkg"
      # override system files with tides' dotfiles
      if [[ $(yq -r '.config.configure.dotfiles.stowMode' "$CONFIG") == "override" ]] \
        && git status --porcelain --untracked-files=no $DOTFILES \
        | grep -q "$pkg"; then
        # NOTE: commit any new changes made to dotfiles as they will be reset
        # if there are any changes detected.
        # TODO: explore a cleaner option than git restore
        git restore "$DOTFILES/$pkg/"
      fi
    done
  fi

  # setup git user field in gitconfig via ~/.gitconfig.local
  if [[ $(yq '.config.configure.apps.git.userInfo' "$CONFIG") == true ]]; then
    tee ~/.gitconfig.local <<EOF >/dev/null
[user]
    name = $(yq '.gitconfig.name' "$SECRETS")
    email = $(yq '.gitconfig.email' "$SECRETS")
EOF
    # add signingkey if field exists
    if [[ -n $(yq '.gitconfig.signingkey' secrets.yaml) ]]; then
      tee -a ~/.gitconfig.local <<EOF >/dev/null
    signingkey = $(yq '.gitconfig.signingkey' "$SECRETS")
EOF
    fi
  fi

  # setup docker
  if [[ $(yq '.config.configure.apps.docker' "$CONFIG") == true ]]; then
    # https://docs.docker.com/engine/install/linux-postinstall/

    # manage docker as non-root user
    if ! id --name --groups "$USER" | grep docker &>/dev/null; then
      # create docker group
      sudo groupadd docker
      # add user to docker group
      sudo usermod -aG docker "$USER"
      # change group ID to docker to activate change in current shell
      newgrp docker
    fi

    # configure docker to start on boot (& right now) with systemd
    if ! systemctl -q is-active docker.service; then
      sudo systemctl enable --now docker.service
    fi
    if ! systemctl -q is-active containerd.service; then
      sudo systemctl enable --now containerd.service
    fi

    # use local logging driver to prevent disk-exhaustion
    # local logging driver performs log-rotation & compresses log files by
    # default.
    # https://docs.docker.com/config/containers/logging/configure/
    # https://docs.docker.com/config/containers/logging/local/
    if [[ "$(yq -r '.log-driver' /etc/docker/daemon.json)" != "local" ]]; then
      yq -p=j -n -o=j \
        '{"log-driver":"local","log-opts":{"max-size":"10m"}}' \
        | sudo tee /etc/docker/daemon.json >/dev/null
    fi
  fi

  # install vscodium extensions
  if [[ $(yq '.config.configure.apps.vscodium.extensionsEnabled' "$CONFIG") == true ]] \
    && [[ $(yq '.config.configure.apps.vscodium.extensions | length' "$CONFIG") -gt 0 ]]; then
    local extensions
    mapfile -t extensions < <(
      yq -r '.config.configure.apps.vscodium.extensions[]' "$CONFIG"
    )
    for ext in "${extensions[@]}"; do
      # install vscodium extensions
      # shellcheck disable=SC2086
      codium --install-extension $ext
    done
  fi
}

# ----- MAIN -----

main() {
  # download & install yq if not installed
  if ! command -v yq &>/dev/null; then
    sudo curl -sSL -o /usr/bin/yq \
      https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    sudo chmod +x /usr/bin/yq
  fi

  [[ $# -gt 0 ]] || {
    _usage
    _error_msg
    exit 1
  }

  while [[ $# -gt 0 ]]; do
    case $1 in
      -c | --config-file)
        set_config_file "$2"
        shift
        ;;
      -s | --secrets-file)
        set_secrets_file "$2"
        shift
        ;;
      check) check ;;
      install) install ;;
      update) update ;;
      configure) configure ;;
      -h | --help | h | help)
        _usage
        ;;
      *)
        _usage
        _error_msg
        exit 1
        ;;
    esac
    shift
  done
}

main "$@"
